LIBFT (https://github.com/Kuroikki-ops/Libft)

// ft_isalpha --> int	ft_isalpha(char c)
# Revisa si c es una letra (mayus/minus)
# Devuelve 1 si es una letra
# Devuelve 0 si no lo es


// ft_isdigit --> int	ft_isdigit(int c)
# Revisa si c es un numero
# Devuelve 1 si es un numero
# Devuelve 0 si no lo es


// ft_isalnum --> int	ft_isalnum(int c)
# Revisa si c es una letra o un numero
# Devuelve 1 si es una letra o numero
# Devuelve 0 si no lo es


// ft_isascii --> int	ft_isascii(int c)
# Revisa si c esta dentro del rango de ascii (entre 0 y 127)
# Devuelve 1 si esta dentro del rango
# Devuelve 0 si no lo esta


// ft_isprint --> ft_isprint(int c)
# Revisa si c es un caracter imprimible (entre 32 y 126)
# Devuelve 1 si esta dentro del rango
# Devuelve 0 si no lo esta


// ft_strlen --> int	ft_strlen(char *str)
# Cuenta cuantos caracteres tiene un string
# Devuelve el numero de caracteres


// ft_memset --> void	*ft_memset(void *ptr, int c, size_t n)
# Se usa para darle el mismo valor a un bloque de memoria
 	|--> Pones el valor que quieras (letra 'a'/97 o 'A'/65, numero '4'/52)
	 |--> Especificas cunatos bytes de memoria quieres llenar con ese valor
	  |--> Se rellena con ese valor
~ void *ptr --> Puntero al array que se quiere modificar
	\--> void * es un puntero generico, se puede convertir en cualquier de dato
	 \--> para imprimrir hay que hacer un arreglo (str[] = "";)
~ int c --> Valor con el que se llenara el espacio de memoria
	\--> Se convierte en unsigned char (este es 1 byte, un numero entero entre 0 y 255)
~ size_t n --> Numero de bytes que cambiara por el nuevo valor
# Siempre sera positivo o cero (ASCII)
 	|--> char (de -128 a 127)
 	 |--> unsigned char (de 0 a 255)
# Devuelve el puntero modificado


// ft_bzero --> void	ft_bzero(void *s, size_t n)
# borra memoria (n) en el lugar donde apunta s
	\--> sustituye lo que haya por '\0'


// ft_memcpy --> void *memcpy(void *dest, const void *src, size_t n)
# copia (n) bytes de un area de memoria (*src) a otra (*dest) 
# las areas de memoria se pueden superponer, se puede perder informacion
# Devuelve el puntero que apunta a (dest)


// ft_memmove --> void	*ft_memmove(void *dest, const void *src, size_t n)
# copia (n) bytes de un area de memoria (*src) a otra (*dest)
# las areas de memoria se pueden superponer pero se asegura de NO perder informacion
	\--> copia de atras a delante para que no se sobreescriba antes de  copiarlo
# Devuelve el puntero que apunta a (dest)


// ft_strlcpy --> size_t	ft_strlcpy(char	*dest, const char *src, size_t size)
# Se usa para copiar strings de froma segura, sin desbordamiento de buffer
	\--> lo hace hasta un maximo de (size - 1)	
# Se asegura de no sobrepasar el buffer de (dest).
	\--> termina el string poniendo '\0'
# Devuelve la longitud total del string copiado


// ft_strlcat --> size_t	ft_strlcat(char *dest, const char *src, size_t size)
# Se usa para concatenar strings de froma segura, sin desbordamiento de buffer
	\--> copia (src) despues de lo que haya en (dest) respetando su tamaÃ±o
	 \--> si (dest) es 10 y (src) 15 solo copiara lo que quepa dentro de (dest)
# NO sobrepasa el buffer de dest
	\--> pone '\0' al final de (dest) si ha espacio	
# Devuelve la longitud de la cadena concatenada total, no incluyendo el carÃ¡cter nulo final


// ft_toupper --> ft_toupper(int c)
# pasa de minusculas a mayusculas
# hay que pasarle caracter por caracter

// ft_tolower --> ft_tolower(int c)
# pasa de mayusculas a minusculas
# hay que pasarle caracter por caracter


// ft_strchr --> char	*ft_strchr(const char *s, int c)
# Se usa para buscar la primera aparicion de (c) en (str)
# devuelve un puntero a la primera aparicion de (c) en (s)
	\-->  sino hay devuelve NULL
	
	
// ft_strrchr --> char	*ft_strrchr(const char *s, int c)
# Se usa para buscar la ultima aparicion de (c) en (s)
# devuelve un puntero a la ultima aparicion de (c) en (str)
	\-->  sino hay devuelve NULL


// ft_strncmp --> int	strncmp(const char *s, const char *s2, size_t n)
# La funcion compara un numero de caracteres, (n), de dos strings, (*s1) y (*s2) 
# Devuelve lo siguiente:
 |--> 0 sin los strigs son iguales
 |--> negativo si (*s1) es menor que (*s2)
 |--> positivo si (*s1) es mayor que (*s2)


// ft_*memchr --> void	*ft_memchr(const void *s, int c, size_t n)
# Busca (c) en un espacio de memoria apuntado por (*s) hasta (n)
# Devuelve el puntero (*s) apuntando a el carcter buscado
	\--> sino devuelve NULL
	
// ft_memcmp --> int	ft_memcmp(const void *s1, const void *s2, size_t n)
# Compara (n) bytes, como usigned char, del area de memoria de (*s1) y (*s2)
# Devuelve lo siguiente:
 |--> 0 sin los strigs son iguales
 |--> negativo si (*s1) es menor que (*s2)
 |--> positivo si (*s1) es mayor que (*s2)


// ft_strnstr --> char	*ft_strnstr(const char *haystack, const char *needle, size_t len)
# Se usa para buscar un string acado en \0 dentro de uno mas grande
# Si lo encuentra devuelve un puntero que apunta a lo que se busca sino null


// ft_atoi --> int	ft_atoi(const char *str)
# combierte un string en numeros
	\--> string "1234" a int 1234
# si hay letras para cuando las detecte o cero si esta al principio
	|--> str "12ab3c" --> int 12
	 \--> str "abc123" --> int 0


// ft_calloc --> void	*ft_calloc(size_t count, size_t size)
# sirve para reserbar un espacio de memoria e inicializarlo en cero
# (count) es el numero de elentos que se quiere reservar
# (size) es el tamano de esos elemntos
~ se crea un puntero void para devolver al final
~ se usa malloc para reservar la memoria (count * size)
~ se comprueba que ha ido bien (no NULL)
~ se inicializa todo a 0 con ft_bzero
~ se devuelve un puntero void a la memoria reservada


// ft_strdup --> char	*ft_strdup(const char *s1)
# copia un string a un nuevo espacio de memoria
# devuelve un puntero al nuevo string


// ft_substr --> char	*ft_substr(const char *s, unsigned int start, size_t len)
# copia una pequena parte de un string en un espacio de memoria reservado por malloc
# devuelve un substring del string (s) de (len) de largo empezando por el indice (start)


// ft_strjoin --> char	*ft_strjoin(const char *s1, const char *s2)
# usa malloc para reservar espacio y concatenar strings, (*s1) y (*s2)
# devuelve un nuevo string formado por la concatenacion de (*s1) y (*s2)


// ft_strtrim --> char	*ft_strtrim(const char *s1, const char *set)
# busca un estring dentro de otro y recorta el resto

// ft_split --> char	**ft_split(const char *s, char c)
# busca un separador establecido por (c) y separa un string (*s) en diferentes strings usando malloc

// ft_itoa --> char	*ft_itoa(int n)
# hace lo contrario de atoi
	\--> convierte un numero entero en una cadena de chars, un string
